name: Deploy Azure Functions

on:
  push:
    branches:
      - develop
      - main
      - master

permissions:
  id-token: write
  contents: read

concurrency:
  group: functions-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_VERSION: 9.0.x
  FUNCTIONS_PROJECT: src/Hoops.Functions/Hoops.Functions.csproj
  PUBLISH_DIR: publish

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore Hoops.sln

      - name: Build
        run: dotnet build Hoops.sln -c Release --no-restore

      - name: Test (fast)
        run: dotnet test Hoops.sln -c Release --no-build --filter "TestCategory!=Slow" --nologo

      - name: Publish Functions (self-contained linux-x64)
        run: |
          dotnet publish ${{ env.FUNCTIONS_PROJECT }} \
            -c Release \
            -o ${{ env.PUBLISH_DIR }} \
            -r linux-x64 \
            --self-contained true \
            /p:PublishSingleFile=false

      - name: Archive package
        run: |
          cd ${{ env.PUBLISH_DIR }}
          zip -r ../functions.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: functions
          path: functions.zip

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: functions
          path: .

      - name: Validate package file
        shell: bash
        run: |
          set -e
          ls -lah
          if [ ! -f "functions.zip" ]; then
            echo "functions.zip not found in working directory" >&2
            exit 1
          fi
          echo "Listing ZIP entries (top 50):"
          unzip -l functions.zip | head -n 50 || true
          echo "Check for host.json and dlls inside the zip:"
          unzip -l functions.zip | grep -E "host.json|bin/.*\\.dll" || echo "Warning: expected files not found in listing"

      - name: Validate Azure secrets & select auth mode
        id: auth
        shell: bash
        run: |
          set -e
          trim() { echo "$1" | sed 's/^[[:space:]]\+//;s/[[:space:]]\+$//' ; }
          CID=$(trim "${{ secrets.AZURE_CLIENT_ID }}"); TID=$(trim "${{ secrets.AZURE_TENANT_ID }}"); SID=$(trim "${{ secrets.AZURE_SUBSCRIPTION_ID }}"); CSEC=$(trim "${{ secrets.AZURE_CLIENT_SECRET }}")
          [ -n "$CID" ] && echo "AZURE_CLIENT_ID: set" || (echo "AZURE_CLIENT_ID: MISSING" && exit 1)
          [ -n "$TID" ] && echo "AZURE_TENANT_ID: set" || (echo "AZURE_TENANT_ID: MISSING" && exit 1)
          [ -n "$SID" ] && echo "AZURE_SUBSCRIPTION_ID: set" || (echo "AZURE_SUBSCRIPTION_ID: MISSING" && exit 1)
          BRANCH="${{ github.ref }}"
          echo "Branch: $BRANCH"
          if [ "$BRANCH" = "refs/heads/develop" ]; then
            echo "Forcing OIDC on develop"
            echo "auth_mode=oidc" >> $GITHUB_OUTPUT
          else
            if [ -n "$CSEC" ]; then
              echo "AZURE_CLIENT_SECRET: set (using Service Principal secret auth)"
              echo "auth_mode=sp" >> $GITHUB_OUTPUT
            else
              echo "AZURE_CLIENT_SECRET: not set (using OIDC federated credentials)"
              echo "auth_mode=oidc" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Azure Login (Service Principal secret)
        if: steps.auth.outputs.auth_mode == 'sp'
        uses: azure/login@v2
        continue-on-error: true
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Azure Login (OIDC federated)
        if: steps.auth.outputs.auth_mode == 'oidc'
        uses: azure/login@v2
        continue-on-error: true
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Verify Azure login
        shell: bash
        run: |
          if ! az account show -o table; then
            {
              echo "## Azure Login Failed";
              echo "- Check federated credential subject (should match environment: dev)";
              echo "- Ensure id-token: write permission is set at workflow level";
              echo "- Confirm AZURE_CLIENT_ID / TENANT_ID / SUBSCRIPTION_ID environment secrets exist";
            } >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Show Azure context
        run: az account show -o table

      - name: Verify Function App exists
        run: |
          az functionapp show \
            --name ${{ steps.selectapp.outputs.app_name }} \
            --resource-group ${{ steps.selectapp.outputs.resource_group }} \
            -o table

      - name: Validate required secrets
        shell: bash
        run: |
          [ -n "${{ secrets.HOOPS_CONNECTION_STRING }}" ] && echo "HOOPS_CONNECTION_STRING: set" || (echo "HOOPS_CONNECTION_STRING: MISSING (set environment secret for dev)" >&2; exit 1)

      - name: Select Function App by branch
        id: selectapp
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "app_name=hoops-functions-dev" >> $GITHUB_OUTPUT
            echo "resource_group=csbc-dev" >> $GITHUB_OUTPUT
          else
            echo "app_name=hoops-functions-prod" >> $GITHUB_OUTPUT
            echo "resource_group=csbc-prod" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Azure Functions (zipDeploy)
        uses: azure/functions-action@v1
        continue-on-error: true
        with:
          app-name: ${{ steps.selectapp.outputs.app_name }}
          package: functions.zip

      - name: Fallback deploy via Azure CLI (config-zip)
        if: failure()
        run: |
          echo "Action-based deploy failed. Trying az functionapp deployment source config-zip..."
          az functionapp deployment source config-zip \
            --name ${{ steps.selectapp.outputs.app_name }} \
            --resource-group ${{ steps.selectapp.outputs.resource_group }} \
            --src functions.zip

      - name: Show deployment logs (Kudu)
        if: always()
        run: |
          echo "If deployment failed, check the Function App's Log stream in the portal for startup errors."

      - name: Configure Function App Settings
        run: |
          az functionapp config appsettings set \
            --name ${{ steps.selectapp.outputs.app_name }} \
            --resource-group ${{ steps.selectapp.outputs.resource_group }} \
            --settings \
              "FUNCTIONS_WORKER_RUNTIME=dotnet-isolated" \
              "FUNCTIONS_EXTENSION_VERSION=~4" \
              "AzureWebJobsFeatureFlags=EnableOpenApi" \
              "CompanySettings__DefaultCompanyId=1" \
              "KeyVaultUri=https://hoops-dev-kv.vault.azure.net/" \
              "ConnectionStrings__hoopsContext=${{ secrets.HOOPS_CONNECTION_STRING }}"

      - name: Verify discovered functions
        id: verify_functions
        run: |
          set -e
          ATTEMPTS=0
          until [ $ATTEMPTS -ge 12 ]
          do
            funcs=$(az functionapp function list \
              --name ${{ steps.selectapp.outputs.app_name }} \
              --resource-group ${{ steps.selectapp.outputs.resource_group }} \
              -o tsv --query "[].name")
            if [ -n "$funcs" ]; then
              echo "Functions discovered:" $funcs
              exit 0
            fi
            ATTEMPTS=$((ATTEMPTS+1))
            echo "No functions yet. Waiting 10s and retrying ($ATTEMPTS/12)..."
            sleep 10
          done
          echo "No functions discovered by the host after retries. Check runtime logs (Log stream) for startup errors." >&2
          exit 1

      - name: Failure diagnostics
        if: failure()
        shell: bash
        run: |
          echo "## Failure diagnostics" >> $GITHUB_STEP_SUMMARY
          echo "Runner info:" >> $GITHUB_STEP_SUMMARY
          uname -a >> $GITHUB_STEP_SUMMARY || true
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Azure context:" >> $GITHUB_STEP_SUMMARY
          az account show -o table >> $GITHUB_STEP_SUMMARY || echo "az context unavailable" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Function App existence check:" >> $GITHUB_STEP_SUMMARY
          az functionapp show --name ${{ steps.selectapp.outputs.app_name }} --resource-group ${{ steps.selectapp.outputs.resource_group }} -o table >> $GITHUB_STEP_SUMMARY || echo "functionapp show failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Package contents (top 50):" >> $GITHUB_STEP_SUMMARY
          unzip -l functions.zip | head -n 50 >> $GITHUB_STEP_SUMMARY || echo "zip listing failed" >> $GITHUB_STEP_SUMMARY

      - name: Configure CORS
        run: |
          for ORIGIN in \
            "https://thankful-pond-090ec730f.4.azurestaticapps.net" \
            "http://localhost:4200" \
            "https://localhost:4200"; do
            echo "Adding CORS origin: $ORIGIN"
            az functionapp cors add \
              --name ${{ steps.selectapp.outputs.app_name }} \
              --resource-group ${{ steps.selectapp.outputs.resource_group }} \
              --allowed-origins "$ORIGIN" || echo "Origin $ORIGIN may already exist; continuing."
          done

      - name: Enable CORS credentials support
        run: |
          az resource update \
            --resource-group ${{ steps.selectapp.outputs.resource_group }} \
            --resource-type Microsoft.Web/sites/config \
            --name "${{ steps.selectapp.outputs.app_name }}/web" \
            --set properties.cors.supportsCredentials=true

      - name: Show current CORS settings
        run: |
          az resource show \
            --resource-group ${{ steps.selectapp.outputs.resource_group }} \
            --resource-type Microsoft.Web/sites/config \
            --name "${{ steps.selectapp.outputs.app_name }}/web" \
            --query "properties.cors" -o jsonc

      - name: Enable Managed Identity and Grant Key Vault Access
        run: |
          # Enable system-assigned managed identity
          az functionapp identity assign \
            --name ${{ steps.selectapp.outputs.app_name }} \
            --resource-group ${{ steps.selectapp.outputs.resource_group }}

          # Get the principal ID of the managed identity 
          PRINCIPAL_ID=$(az functionapp identity show \
            --name ${{ steps.selectapp.outputs.app_name }} \
            --resource-group ${{ steps.selectapp.outputs.resource_group }} \
            --query principalId -o tsv)

          # Grant Key Vault access
          az keyvault set-policy \
            --name hoops-dev-kv \
            --object-id $PRINCIPAL_ID \
            --secret-permissions get list
